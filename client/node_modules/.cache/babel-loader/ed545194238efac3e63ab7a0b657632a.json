{"ast":null,"code":"var _jsxFileName = \"/Users/yuyili/Development/Projects/count_scores_dotcom/client/src/components/AddNewGame.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport TextField from \"@mui/material/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddNewGame = _ref => {\n  _s();\n\n  let {\n    user\n  } = _ref;\n  const [allGames, setAllGames] = useState([]);\n  const [allUsers, setAllUsers] = useState([]);\n  const [gameInput, setGameInput] = useState(\"\");\n  const [dateInput, setDateInput] = useState(\"\");\n  const [newMatch, setNewMatch] = useState({\n    game_id: null,\n    date: dateInput\n  });\n  const [allPlayers, setAllPlayers] = useState([{\n    user_id: user.id,\n    match_id: null,\n    score: null,\n    is_winner: null,\n    name: `${user.first_name} ${user.last_name}`\n  }]);\n  const [allPlayerEmails, setAllPlayerEmails] = useState([user.email]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    handleGameInput(gameInput);\n    setGameInput(\"\");\n    setDateInput(\"\");\n    setNewMatch({\n      game_id: null,\n      date: dateInput\n    });\n    setAllPlayers([{\n      user_id: user.id,\n      match_id: null,\n      score: null,\n      is_winner: null,\n      name: `${user.first_name} ${user.last_name}`\n    }]);\n    setAllPlayerEmails([user.email]);\n    e.target.reset();\n  };\n\n  const handleMatch = game => {\n    let newMatchEntry = { ...newMatch,\n      game_id: game.id,\n      date: dateInput\n    };\n    fetch(\"http://localhost:3000/matches\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newMatchEntry)\n    }).then(res => {\n      if (res.ok) {\n        res.json().then(matchInDB => {\n          console.log(`Match Added To DB: ${JSON.stringify(matchInDB)}`);\n          handlePlayerSubmit(matchInDB);\n        });\n      } else {\n        res.json().then(errors => console.log(errors));\n      }\n    });\n  };\n\n  const handlePlayerSubmit = match => {\n    comparePlayerEmails();\n    let playersForEntry = [...allPlayers];\n    playersForEntry.map(givenPlayer => {\n      givenPlayer.match_id = match.id;\n      fetch(\"http://localhost:3000/players\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(givenPlayer)\n      }).then(res => {\n        if (res.ok) {\n          res.json().then(playerinDB => {\n            console.log(`Player Added to DB: ${JSON.stringify(playerinDB, null, 4)}`);\n          });\n        } else {\n          res.json().then(errors => console.log(`${givenPlayer.name} : ${errors}`));\n        }\n      });\n    });\n  };\n\n  const handleGameInput = input => {\n    let inputComparison = input.toLowerCase();\n    let gameInDB = false;\n    let gameForEntry = false;\n    allGames.map(givenGame => {\n      let gameComparison = givenGame.name.toLowerCase();\n\n      if (inputComparison == gameComparison) {\n        gameInDB = true;\n        gameForEntry = givenGame;\n        console.log(`Game Entry Found: ${givenGame.name}`);\n      }\n    });\n\n    if (gameInDB == false) {\n      fetch(\"http://localhost:3000/games\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: input\n        })\n      }).then(res => {\n        if (res.ok) {\n          res.json().then(newGameEntry => {\n            gameForEntry = newGameEntry;\n            console.log(`Game For Entry: ${JSON.stringify(gameForEntry)}`);\n            setNewMatch({ ...newMatch,\n              game_id: gameForEntry.id,\n              date: dateInput\n            });\n            handleMatch(gameForEntry);\n          });\n        } else {\n          res.json().then(errors => console.log(errors));\n        }\n      });\n    }\n\n    if (gameInDB === true) {\n      console.log(`Game For Entry: ${JSON.stringify(gameForEntry)}`);\n      setNewMatch({ ...newMatch,\n        game_id: gameForEntry.id,\n        date: dateInput\n      });\n      handleMatch(gameForEntry);\n    }\n  };\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/games\").then(r => {\n      if (r.ok) {\n        r.json().then(games => setAllGames(games));\n      }\n    });\n  }, []);\n  useEffect(() => {\n    fetch(\"http://localhost:3000/users\").then(r => {\n      if (r.ok) {\n        r.json().then(users => setAllUsers(users));\n      }\n    });\n  }, []);\n\n  const handlePlayerName = e => {\n    const indexValue = parseInt(e.target.name);\n    let playerEntries = [...allPlayers];\n    playerEntries[indexValue].name = e.target.value;\n    setAllPlayers(playerEntries);\n  };\n\n  const handlePlayerScore = e => {\n    const indexValue = parseInt(e.target.name);\n    let playerEntries = [...allPlayers];\n    playerEntries[indexValue].score = e.target.value;\n    setAllPlayers(playerEntries);\n  };\n\n  const handlePlayerEmail = e => {\n    const indexValue = parseInt(e.target.name);\n    let playerEmails = [...allPlayerEmails];\n    playerEmails[indexValue] = e.target.value;\n    setAllPlayerEmails(playerEmails);\n    console.log(allPlayerEmails);\n  };\n\n  const comparePlayerEmails = () => {\n    let counter = 0;\n    allPlayerEmails.map(givenPlayerEmail => {\n      let playerList = [...allPlayers];\n      let emailComparison = givenPlayerEmail.toLowerCase();\n      allUsers.map(givenUser => {\n        let databaseEmail = givenUser.email;\n\n        if (emailComparison === databaseEmail.toLowerCase()) {\n          playerList[counter].user_id = givenUser.id;\n          console.log(`User Found for ${databaseEmail} at id ${givenUser.id}`);\n          setAllPlayers(playerList);\n        }\n      });\n      counter += 1;\n    });\n  };\n\n  const addPlayer = e => {\n    setAllPlayers([...allPlayers, {\n      user_id: 2,\n      match_id: null,\n      score: null,\n      is_winner: null,\n      name: \"\"\n    }]);\n    setAllPlayerEmails([...allPlayerEmails, \"\"]);\n    console.log(allPlayers);\n  };\n\n  const removePlayer = e => {\n    let playersMinusOne = [...allPlayers];\n    playersMinusOne.pop();\n    setAllPlayers(playersMinusOne);\n  };\n\n  const spawnPlayers = () => {\n    let counter = 0;\n    const displayedPlayers = [...allPlayers].map(givenPlayer => {\n      counter = counter + 1;\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            required: true,\n            fullWidth: true,\n            autoComplete: `player${counter}name`,\n            id: `player${counter}name`,\n            label: `Player ${counter} Name`,\n            name: `${counter - 1}`,\n            onChange: handlePlayerName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            autoComplete: `player${counter}name`,\n            id: `player${counter}name`,\n            label: `Player ${counter} Email (optional)`,\n            name: `${counter - 1}`,\n            onChange: handlePlayerEmail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            required: true,\n            fullWidth: true,\n            autoComplete: `player${counter}score`,\n            id: `player${counter}score`,\n            label: `Player ${counter} Score`,\n            name: `${counter - 1}`,\n            onChange: handlePlayerScore\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this)]\n        }, counter, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this);\n    });\n    return displayedPlayers;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        component: \"main\",\n        maxWidth: \"xs\",\n        children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            marginTop: 8,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n          },\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            component: \"h1\",\n            variant: \"h5\",\n            children: \"Add New Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            component: \"form\",\n            noValidate: true,\n            sx: {\n              mt: 3\n            },\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 6,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  required: true,\n                  fullWidth: true,\n                  autoComplete: \"game-name\",\n                  name: \"name\",\n                  id: \"gameName\",\n                  label: \"Game\",\n                  autoFocus: true,\n                  onChange: e => setGameInput(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 282,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 6,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  required: true,\n                  fullWidth: true,\n                  autoComplete: \"match-date\",\n                  id: \"matchDate\",\n                  label: \"Date of Game\",\n                  name: \"date\",\n                  onChange: e => setDateInput(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 294,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 17\n              }, this), spawnPlayers(), /*#__PURE__*/_jsxDEV(Button, {\n                small: true,\n                variant: \"contained\",\n                sx: {\n                  mt: 3,\n                  mb: 2\n                },\n                onClick: addPlayer,\n                children: \"Add Player\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                fullWidth: true,\n                variant: \"contained\",\n                sx: {\n                  mt: 3,\n                  mb: 2\n                },\n                children: \"Add New Game\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addPlayer,\n      children: \"Add Player\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: removePlayer,\n      children: \"Remove Last Added Player\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddNewGame, \"ud3WW4bzVX0UpPu1vOOpr0ukvUo=\");\n\n_c = AddNewGame;\nconst theme = createTheme();\nexport default AddNewGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNewGame\");","map":{"version":3,"sources":["/Users/yuyili/Development/Projects/count_scores_dotcom/client/src/components/AddNewGame.js"],"names":["useState","useEffect","Button","CssBaseline","TextField","Grid","Box","Typography","Container","Checkbox","createTheme","ThemeProvider","AddNewGame","user","allGames","setAllGames","allUsers","setAllUsers","gameInput","setGameInput","dateInput","setDateInput","newMatch","setNewMatch","game_id","date","allPlayers","setAllPlayers","user_id","id","match_id","score","is_winner","name","first_name","last_name","allPlayerEmails","setAllPlayerEmails","email","handleSubmit","e","preventDefault","handleGameInput","target","reset","handleMatch","game","newMatchEntry","fetch","method","headers","body","JSON","stringify","then","res","ok","json","matchInDB","console","log","handlePlayerSubmit","errors","match","comparePlayerEmails","playersForEntry","map","givenPlayer","playerinDB","input","inputComparison","toLowerCase","gameInDB","gameForEntry","givenGame","gameComparison","newGameEntry","r","games","users","handlePlayerName","indexValue","parseInt","playerEntries","value","handlePlayerScore","handlePlayerEmail","playerEmails","counter","givenPlayerEmail","playerList","emailComparison","givenUser","databaseEmail","addPlayer","removePlayer","playersMinusOne","pop","spawnPlayers","displayedPlayers","theme","marginTop","display","flexDirection","alignItems","mt","mb"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport TextField from \"@mui/material/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nconst AddNewGame = ({ user }) => {\n  const [allGames, setAllGames] = useState([]);\n  const [allUsers, setAllUsers] = useState([]);\n  const [gameInput, setGameInput] = useState(\"\");\n  const [dateInput, setDateInput] = useState(\"\");\n  const [newMatch, setNewMatch] = useState({\n    game_id: null,\n    date: dateInput,\n  });\n  const [allPlayers, setAllPlayers] = useState([\n    {\n      user_id: user.id,\n      match_id: null,\n      score: null,\n      is_winner: null,\n      name: `${user.first_name} ${user.last_name}`,\n    },\n  ]);\n  const [allPlayerEmails, setAllPlayerEmails] = useState([user.email]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    handleGameInput(gameInput);\n    setGameInput(\"\");\n    setDateInput(\"\");\n    setNewMatch({\n      game_id: null,\n      date: dateInput,\n    });\n    setAllPlayers([\n      {\n        user_id: user.id,\n        match_id: null,\n        score: null,\n        is_winner: null,\n        name: `${user.first_name} ${user.last_name}`,\n      },\n    ]);\n    setAllPlayerEmails([user.email]);\n    e.target.reset();\n  };\n\n  const handleMatch = (game) => {\n    let newMatchEntry = { ...newMatch, game_id: game.id, date: dateInput };\n    fetch(\"http://localhost:3000/matches\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newMatchEntry),\n    }).then((res) => {\n      if (res.ok) {\n        res.json().then((matchInDB) => {\n          console.log(`Match Added To DB: ${JSON.stringify(matchInDB)}`);\n          handlePlayerSubmit(matchInDB);\n        });\n      } else {\n        res.json().then((errors) => console.log(errors));\n      }\n    });\n  };\n\n  const handlePlayerSubmit = (match) => {\n    comparePlayerEmails();\n    let playersForEntry = [...allPlayers];\n    playersForEntry.map((givenPlayer) => {\n      givenPlayer.match_id = match.id;\n      fetch(\"http://localhost:3000/players\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(givenPlayer),\n      }).then((res) => {\n        if (res.ok) {\n          res.json().then((playerinDB) => {\n            console.log(\n              `Player Added to DB: ${JSON.stringify(playerinDB, null, 4)}`\n            );\n          });\n        } else {\n          res\n            .json()\n            .then((errors) => console.log(`${givenPlayer.name} : ${errors}`));\n        }\n      });\n    });\n  };\n\n  const handleGameInput = (input) => {\n    let inputComparison = input.toLowerCase();\n    let gameInDB = false;\n    let gameForEntry = false;\n    allGames.map((givenGame) => {\n      let gameComparison = givenGame.name.toLowerCase();\n      if (inputComparison == gameComparison) {\n        gameInDB = true;\n        gameForEntry = givenGame;\n        console.log(`Game Entry Found: ${givenGame.name}`);\n      }\n    });\n    if (gameInDB == false) {\n      fetch(\"http://localhost:3000/games\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          name: input,\n        }),\n      }).then((res) => {\n        if (res.ok) {\n          res.json().then((newGameEntry) => {\n            gameForEntry = newGameEntry;\n            console.log(`Game For Entry: ${JSON.stringify(gameForEntry)}`);\n            setNewMatch({\n              ...newMatch,\n              game_id: gameForEntry.id,\n              date: dateInput,\n            });\n            handleMatch(gameForEntry);\n          });\n        } else {\n          res.json().then((errors) => console.log(errors));\n        }\n      });\n    }\n    if (gameInDB === true) {\n      console.log(`Game For Entry: ${JSON.stringify(gameForEntry)}`);\n      setNewMatch({ ...newMatch, game_id: gameForEntry.id, date: dateInput });\n      handleMatch(gameForEntry);\n    }\n  };\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/games\").then((r) => {\n      if (r.ok) {\n        r.json().then((games) => setAllGames(games));\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/users\").then((r) => {\n      if (r.ok) {\n        r.json().then((users) => setAllUsers(users));\n      }\n    });\n  }, []);\n\n  const handlePlayerName = (e) => {\n    const indexValue = parseInt(e.target.name);\n    let playerEntries = [...allPlayers];\n    playerEntries[indexValue].name = e.target.value;\n    setAllPlayers(playerEntries);\n  };\n\n  const handlePlayerScore = (e) => {\n    const indexValue = parseInt(e.target.name);\n    let playerEntries = [...allPlayers];\n    playerEntries[indexValue].score = e.target.value;\n    setAllPlayers(playerEntries);\n  };\n\n  const handlePlayerEmail = (e) => {\n    const indexValue = parseInt(e.target.name);\n    let playerEmails = [...allPlayerEmails];\n    playerEmails[indexValue] = e.target.value;\n    setAllPlayerEmails(playerEmails);\n    console.log(allPlayerEmails);\n  };\n\n  const comparePlayerEmails = () => {\n    let counter = 0;\n    allPlayerEmails.map((givenPlayerEmail) => {\n      let playerList = [...allPlayers];\n      let emailComparison = givenPlayerEmail.toLowerCase();\n      allUsers.map((givenUser) => {\n        let databaseEmail = givenUser.email;\n        if (emailComparison === databaseEmail.toLowerCase()) {\n          playerList[counter].user_id = givenUser.id;\n          console.log(`User Found for ${databaseEmail} at id ${givenUser.id}`);\n          setAllPlayers(playerList);\n        }\n      });\n      counter += 1;\n    });\n  };\n\n  const addPlayer = (e) => {\n    setAllPlayers([\n      ...allPlayers,\n      {\n        user_id: 2,\n        match_id: null,\n        score: null,\n        is_winner: null,\n        name: \"\",\n      },\n    ]);\n    setAllPlayerEmails([...allPlayerEmails, \"\"]);\n    console.log(allPlayers);\n  };\n\n  const removePlayer = (e) => {\n    let playersMinusOne = [...allPlayers];\n    playersMinusOne.pop();\n    setAllPlayers(playersMinusOne);\n  };\n\n  const spawnPlayers = () => {\n    let counter = 0;\n    const displayedPlayers = [...allPlayers].map((givenPlayer) => {\n      counter = counter + 1;\n      return (\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6} key={counter}>\n            <TextField\n              required\n              fullWidth\n              autoComplete={`player${counter}name`}\n              id={`player${counter}name`}\n              label={`Player ${counter} Name`}\n              name={`${counter - 1}`}\n              onChange={handlePlayerName}\n            />\n            <TextField\n              fullWidth\n              autoComplete={`player${counter}name`}\n              id={`player${counter}name`}\n              label={`Player ${counter} Email (optional)`}\n              name={`${counter - 1}`}\n              onChange={handlePlayerEmail}\n            />\n            <TextField\n              required\n              fullWidth\n              autoComplete={`player${counter}score`}\n              id={`player${counter}score`}\n              label={`Player ${counter} Score`}\n              name={`${counter - 1}`}\n              onChange={handlePlayerScore}\n            />\n          </Grid>\n        </Grid>\n      );\n    });\n    return displayedPlayers;\n  };\n\n  return (\n    <div>\n      <ThemeProvider theme={theme}>\n        <Container component=\"main\" maxWidth=\"xs\">\n          <CssBaseline />\n          <Box\n            sx={{\n              marginTop: 8,\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n            }}\n            onSubmit={handleSubmit}\n          >\n            <Typography component=\"h1\" variant=\"h5\">\n              Add New Game\n            </Typography>\n            <Box component=\"form\" noValidate sx={{ mt: 3 }}>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    required\n                    fullWidth\n                    autoComplete=\"game-name\"\n                    name=\"name\"\n                    id=\"gameName\"\n                    label=\"Game\"\n                    autoFocus\n                    onChange={(e) => setGameInput(e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    required\n                    fullWidth\n                    autoComplete=\"match-date\"\n                    id=\"matchDate\"\n                    label=\"Date of Game\"\n                    name=\"date\"\n                    onChange={(e) => setDateInput(e.target.value)}\n                  />\n                </Grid>\n                {spawnPlayers()}\n                <Button\n                  small\n                  variant=\"contained\"\n                  sx={{ mt: 3, mb: 2 }}\n                  onClick={addPlayer}\n                >\n                  Add Player\n                </Button>\n\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  sx={{ mt: 3, mb: 2 }}\n                >\n                  Add New Game\n                </Button>\n              </Grid>\n            </Box>\n          </Box>\n        </Container>\n      </ThemeProvider>\n      <button onClick={addPlayer}>Add Player</button>\n      <button onClick={removePlayer}>Remove Last Added Player</button>\n    </div>\n  );\n};\n\nconst theme = createTheme();\n\nexport default AddNewGame;\n"]},"metadata":{},"sourceType":"module"}