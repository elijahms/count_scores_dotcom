{"ast":null,"code":"var _jsxFileName = \"/Users/wes/Development/projects/count_scores_dotcom/client/src/components/GameCard.js\",\n    _s = $RefreshSig$();\n\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport { useState, useEffect } from \"react\";\nimport MatchContainer from \"./MatchContainer\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GameCard = _ref => {\n  _s();\n\n  let {\n    user,\n    game,\n    setSelectedGame\n  } = _ref;\n  const [gameStats, setGameStats] = useState([]);\n  const [gameAnalytics, setGameAnalytics] = useState({\n    game: game.name,\n    gamesPlayed: null,\n    gamesWon: null,\n    winPercentage: null,\n    averageScore: null\n  });\n\n  const handleSelectGame = () => {\n    setSelectedGame(game);\n  };\n\n  useEffect(() => {\n    fetch(`http://localhost:3000/users/${user.id}/games/${game.id}/matches`).then(res => res.json()).then(matchData => {\n      setGameStats(matchData);\n      console.log(matchData);\n      console.log(obtainAnalytics(matchData));\n    });\n  }, []);\n\n  const obtainAnalytics = data => {\n    let gp = 0;\n    let gw = 0;\n    let wp = 0;\n    let totpt = 0;\n    let avgsc = 0;\n    let areScores = false;\n    data.map(givenMatch => {\n      gp = gp + 1;\n      let playerData = givenMatch.players.find(isPlayer);\n\n      if (playerData.score) {\n        totpt = totpt + playerData.score;\n        areScores = true;\n      }\n\n      if (playerData.is_winner == true) {\n        gw = gw + 1;\n      }\n    });\n\n    if (gw > 0) {\n      wp = gw / gp * 100;\n    } else {\n      wp = 0;\n    }\n\n    if (areScores) {\n      avgsc = truncatedAverageScore(totpt, gp);\n    } else {\n      avgsc = \"N/A\";\n    }\n\n    let output = {\n      game: game.name,\n      gamesPlayed: gp,\n      gamesWon: gw,\n      winPercentage: wp,\n      averageScore: avgsc\n    };\n    setGameAnalytics(output);\n    return output;\n  };\n\n  const isPlayer = player => {\n    return player.user_id == user.id;\n  };\n\n  const truncatedAverageScore = (num1, num2) => {\n    let avg = num1 / num2;\n    let scoreString = avg.toString();\n    let indexOfDecimal = scoreString.indexOf(\".\");\n    let truncatedPercentage = scoreString.slice(0, indexOfDecimal + 3);\n    return parseFloat(truncatedPercentage);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      container: true,\n      noValidate: true,\n      sx: {\n        mt: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sx: {\n          mt: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            maxWidth: 275\n          },\n          children: [/*#__PURE__*/_jsxDEV(CardContent, {\n            align: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              component: \"div\",\n              children: game.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 28\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h7\",\n              component: \"div\",\n              children: `Average Score: ${gameAnalytics.averageScore}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 28\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h7\",\n              component: \"div\",\n              children: `Win Percentage: ${gameAnalytics.winPercentage} (${gameAnalytics.gamesWon}/${gameAnalytics.gamesPlayed})`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            align: \"center\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              size: \"small\",\n              align: \"right\",\n              onClick: handleSelectGame,\n              children: \"Select Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GameCard, \"NdN/26JzGwYpwYe454V4221TBQs=\");\n\n_c = GameCard;\nexport default GameCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameCard\");","map":{"version":3,"sources":["/Users/wes/Development/projects/count_scores_dotcom/client/src/components/GameCard.js"],"names":["Card","CardContent","Button","Typography","useState","useEffect","MatchContainer","Grid","Box","GameCard","user","game","setSelectedGame","gameStats","setGameStats","gameAnalytics","setGameAnalytics","name","gamesPlayed","gamesWon","winPercentage","averageScore","handleSelectGame","fetch","id","then","res","json","matchData","console","log","obtainAnalytics","data","gp","gw","wp","totpt","avgsc","areScores","map","givenMatch","playerData","players","find","isPlayer","score","is_winner","truncatedAverageScore","output","player","user_id","num1","num2","avg","scoreString","toString","indexOfDecimal","indexOf","truncatedPercentage","slice","parseFloat","mt","maxWidth"],"mappings":"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","sourcesContent":["import Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport { useState, useEffect } from \"react\";\nimport MatchContainer from \"./MatchContainer\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\n\nconst GameCard = ({ user, game, setSelectedGame }) => {\n  const [gameStats,setGameStats] = useState([])\n  const [gameAnalytics,setGameAnalytics] = useState({\n    game: game.name,\n    gamesPlayed: null,\n    gamesWon: null,\n    winPercentage: null,\n    averageScore: null\n  })\n\n  const handleSelectGame = () => {\n    setSelectedGame(game);\n  };\n\n  useEffect(() => {\n    fetch(\n      `http://localhost:3000/users/${user.id}/games/${game.id}/matches`\n    )\n      .then((res) => res.json())\n      .then((matchData) => {\n        setGameStats(matchData)\n        console.log(matchData)\n        console.log(obtainAnalytics(matchData))\n        ;\n      });\n  }, []);\n\n  const obtainAnalytics = (data) => {\n    let gp = 0\n    let gw = 0\n    let wp = 0\n    let totpt = 0\n    let avgsc = 0\n    let areScores = false\n    data.map((givenMatch) => {\n      gp = gp+1\n      let playerData = givenMatch.players.find(isPlayer)\n      if (playerData.score) {\n        totpt = totpt + playerData.score\n        areScores = true\n      }\n      if (playerData.is_winner == true){\n        gw = gw+1\n      }\n    })\n    if (gw > 0){\n      wp = (gw/gp)*100\n    }\n    else {\n      wp = 0\n    }\n    if (areScores){\n      avgsc = truncatedAverageScore(totpt,gp)\n    }\n    else {\n      avgsc =  \"N/A\"\n    }\n    let output = {\n      game: game.name,\n      gamesPlayed: gp,\n      gamesWon: gw,\n      winPercentage: wp,\n      averageScore: avgsc\n    }\n    setGameAnalytics(output)\n    return output\n  }\n\n  const isPlayer = (player) => {\n    return player.user_id == user.id\n  }\n\n  const truncatedAverageScore = (num1,num2) => {\n    let avg = num1/num2\n    let scoreString = avg.toString()\n    let indexOfDecimal = scoreString.indexOf(\".\")\n    let truncatedPercentage = scoreString.slice(0,indexOfDecimal+3)\n    return(parseFloat(truncatedPercentage))\n  }\n\n  return (\n    <div>\n      <Box container noValidate sx={{ mt: 3 }}>\n        <Grid item xs={12} sx={{ mt: 3 }}>\n          <Card sx={{ maxWidth: 275 }}>\n            <CardContent align=\"center\">\n              <Typography variant=\"h5\" component=\"div\">\n                {game.name}\n              </Typography><br></br>\n              <Typography variant=\"h7\" component=\"div\">\n                {`Average Score: ${gameAnalytics.averageScore}`}\n              </Typography><br></br>\n              <Typography variant=\"h7\" component=\"div\">\n                {`Win Percentage: ${gameAnalytics.winPercentage} (${gameAnalytics.gamesWon}/${gameAnalytics.gamesPlayed})`}\n              </Typography>\n            </CardContent>\n            <CardContent align=\"center\">\n              <Button size=\"small\" align=\"right\" onClick={handleSelectGame}>\n                Select Game\n              </Button>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Box>\n    </div>\n  );\n};\n\nexport default GameCard;\n"]},"metadata":{},"sourceType":"module"}